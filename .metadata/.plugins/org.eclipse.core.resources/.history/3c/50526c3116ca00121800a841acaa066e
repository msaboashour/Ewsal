package hend.wifi;

import java.util.HashMap;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;

import android.app.Activity;
import android.content.Context;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.widget.Toast;

public class MainActivity extends Activity {

	List<ScanResult> wifiList;
	WifiManager wifi;
	Context mContext = this;
	HashMap<String, LevelCounter> wifiHash = new HashMap<String, LevelCounter>();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		
		Timer timer = new Timer();
		TimerTask task = new TimerTask() {
			@Override
			public void run() {
				
				LevelCounter levelCounter1 = (LevelCounter)wifiHash.get("00:0d:bd:6f:a9:7c");
				int avgLevel = levelCounter1.level / levelCounter1.count;				
				Toast.makeText(mContext, avgLevel+"", 3000).show();
			}
		};
		
		timer.scheduleAtFixedRate(task, 0, 4000);
		
		
		
		TimerTask task2 = new TimerTask() {
			@Override
			public void run() {
				scanWifi();
			}
		};
		
		timer.scheduleAtFixedRate(task2, 0, 500);

		
	}

	private class Worker extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			while (true) {
				
				Timer timer = new Timer();
				TimerTask task = new TimerTask() {
					@Override
					public void run() {
						scanWifi();
					}
				};
				
				timer.scheduleAtFixedRate(task, 0, 500);

			}
		}
	}

	public void scanWifi() {
		wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);
		boolean isWorking = wifi.startScan();
		if (isWorking) {
			wifiList = wifi.getScanResults();
			for (int i = 0; i < wifiList.size(); i++) {
				ScanResult result = wifiList.get(i);
				if (result.SSID.equalsIgnoreCase("iti_students")) {

					LevelCounter level = (LevelCounter) wifiHash
							.get(result.BSSID);
					if (level == null) {
						level = new LevelCounter();
						level.count = 1;
						level.level = result.level;
						wifiHash.put(result.BSSID, level);
					} else {
						level.count = level.count + 1;
						level.level = level.level + result.level;
					}
				}
			}
		} else {
			Toast.makeText(mContext, "Wifi is not working", 3000).show();
		}
	}

}
